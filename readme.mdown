Imago
====

[![Build Status](https://secure.travis-ci.org/ninetwentyfour/imago.png)](http://travis-ci.org/ninetwentyfour/imago) [![Dependency Status](https://gemnasium.com/ninetwentyfour/imago.png)](https://gemnasium.com/ninetwentyfour/imago) [![Coverage Status](https://coveralls.io/repos/ninetwentyfour/imago/badge.png?branch=master)](https://coveralls.io/r/ninetwentyfour/imago)


Imago is a simple service to return website thumbnails.

Installation
====

Imago works best when deployed to Heroku. It requires a Amazon s3 account and an Airbrake account.

First download the latest imago source.

    git clone https://github.com/ninetwentyfour/imago.git

    cd imago

You should have the heroku command available if you've installed the heroku gem correctly. You can read the [Heroku help](https://devcenter.heroku.com/articles/heroku-command) for configuring the gem once it's installed.

Create a new Heroku application.

    heroku create

You will need to add the Redis to Go addon (this requires a verified account).

    heroku addons:add redistogo:nano

(please note that the nano plan does not include persistence)

Using the Airbrake addon is highly recommended as well.

    heroku addons:add airbrake

(This adds the the developer plan. If youâ€™d like another plan, specify that instead.)

You will also need to set a couple configuration variables.

    heroku config:add IMAGO_S3_KEY=YOUR_S3_KEY

    heroku config:add IMAGO_S3_SECRET=YOUR_S3_SECRET

    heroku config:add IMAGO_S3_BUCKET=YOUR_S3_BUCKET

    heroku config:add IMAGO_BASE_LINK_URL=YOUR_BASE_URL # This is for the final link url. Should be your s3 url or cloudfront url. Include trailing slash.

After the configuration variables are added, you can deploy the app.

    git push heroku master

When the deploy is finished, you can test the install with

    curl http://YOUR_HEROKU_APP_URL/get_image?website=www.reddit.com&width=320&height=200&format=json

API
====

##### Base API URL

http://api.imago.in/get_image?

##### Required Params

- `website`: the url you wish to screenshot. url should be encoded (e.g. http://www.example.com/test?1 becomes http%3A%2F%2Fwww.example.com%2Ftest%3F1). http/https optional.

- `width`: the width of the screen shot. (e.g. 600)

- `height`: the height of the screenshot. (e.g. 600)

- `format`: the format to respond with. Accepted values are html, json, and image. Use image to inline images (e.g. `<img src="/get_image?format=image" />`)

Usage
====

##### Use as an image tag!

`<img src="http://api.imago.in/get_image?website=www.reddit.com&width=320&height=200&format=image" />`
<img src="http://api.imago.in/get_image?website=www.cmsks.com&width=320&height=200&format=image" />

##### Return JSON!

`curl http://api.imago.in/get_image?website=www.reddit.com&width=320&height=200&format=json`

Expected Result:

`{"link":"https://d29sc4udwyhodq.cloudfront.net/309d0aa8f6edbe57b4d09630ec592f57.jpg","website":"http://www.reddit.com"}`

Also available with jsonp.

##### View the HTML!

[http://api.imago.in/get_image?website=www.reddit.com&width=320&height=200&format=html](http://api.imago.in/get_image?website=www.reddit.com&width=320&height=200&format=html)

Source Docs
====

View our source docs [here](http://imago.in/docs/imago.html).

To generate run `docco *.rb -l linear`

Disclaimer
===========

I'm in no way responsible for anything you do with this. If this breaks anything of yours, I'm not responsible for that either.

